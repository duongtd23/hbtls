--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq r4 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq r5 = intruder .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv4 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = true .
	red inv4(s, pqKey(pk', k', r4, r5, n)) implies inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', r4, r5, n), nw(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq r1 = pms(kc, pqKey(pk', k', r4, r5, n)) .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = true .
	eq (r1 = pms(kc, pqKey(pk', k', r4, r5, n))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2) \in hskLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq b1 = intruder .
	eq (r4 = intruder) = false .
	eq (r5 = intruder) = false .
	eq (r17 = prf-skey(prf-ms(pms(kc, pqKey(pk', k', r4, r5, n)), sd1), sd2)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq b = r5 .
	eq (b1 = intruder) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq a = r4 .
	eq (b = r5) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	eq (a = r4) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existCPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op b1 : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = false .
	red inv5(s, a, b, b1, kc, pk', k', sd1, sd2, h, n) implies inv5(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, b1, kc, pk', k', sd1, sd2, h, n) .
close