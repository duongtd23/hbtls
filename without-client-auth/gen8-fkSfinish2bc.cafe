--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq a = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq r1 = intruder .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, intruder, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, intruder, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, intruder, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq b = intruder .
	eq (r1 = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, intruder, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq r2 = a .
	eq (b = intruder) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = true .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv2 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv2(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = true .
	red inv3(s, pqKey(pk', k', a, b, n)) implies inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq existCPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	eq existSPqPriKexM(pqKey(pk', k', a, b, n), nw(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq r8 = pms(kc, pqKey(pk', k', a, b, n)) .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = true .
	eq (a = intruder) = false .
	eq (r2 = a) = false .
	eq (r8 = pms(kc, pqKey(pk', k', a, b, n))) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r10)))) \in pqkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	eq existCPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(getPms(getMs(r10))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r10))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r10)))) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Key .
	op r11 : -> ClPubKeyEx .
	op r12 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r10 \in hskLeaked(s)) = false .
	eq existCPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existSPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = false .
	red inv8(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv8(fkSfinish2c(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> Time taken is 81563ms