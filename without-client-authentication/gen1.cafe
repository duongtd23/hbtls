--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	red inv1(init, a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cChangeCS(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq (sign(r12) = sign(ca, owner(r12), pubKey(r12))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cChangeCS(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cChangeCS(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq (decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cChangeCS(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cChangeCS(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cChangeCS(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cChangeCS(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cChangeCS(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cChangeCS(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cChangeCS(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Prin .
	op r11 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq ss(s, r1, r2, r5) = none .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cChangeCS2(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Prin .
	op r11 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r1, r2, r5) = none) = false .
	eq (ccsM(r9, r2, r1) \in nw(s)) = true .
	eq (sf2M(r10, r2, r1, r11) \in nw(s)) = true .
	eq (ch2M(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (sh2M(r7, r2, r1, r3, r8, r5, cs(ss(s, r1, r2, r5))) \in nw(s)) = true .
	eq decSym?(r11, prf-skey(ms(ss(s, r1, r2, r5)), seedHs(r4, r8))) = true .
	eq decFin(r11, prf-skey(ms(ss(s, r1, r2, r5)), seedHs(r4, r8))) = prf-sfin2(ms(ss(s, r1, r2, r5)), hAbbrHs(r1, r2, r3, r4, r5, r6, r8, cs(ss(s, r1, r2, r5)))) .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cChangeCS2(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Prin .
	op r11 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r1, r2, r5) = none) = false .
	eq (ccsM(r9, r2, r1) \in nw(s)) = true .
	eq (sf2M(r10, r2, r1, r11) \in nw(s)) = true .
	eq (ch2M(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (sh2M(r7, r2, r1, r3, r8, r5, cs(ss(s, r1, r2, r5))) \in nw(s)) = true .
	eq decSym?(r11, prf-skey(ms(ss(s, r1, r2, r5)), seedHs(r4, r8))) = true .
	eq (decFin(r11, prf-skey(ms(ss(s, r1, r2, r5)), seedHs(r4, r8))) = prf-sfin2(ms(ss(s, r1, r2, r5)), hAbbrHs(r1, r2, r3, r4, r5, r6, r8, cs(ss(s, r1, r2, r5))))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cChangeCS2(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Prin .
	op r11 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r1, r2, r5) = none) = false .
	eq (ccsM(r9, r2, r1) \in nw(s)) = true .
	eq (sf2M(r10, r2, r1, r11) \in nw(s)) = true .
	eq (ch2M(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (sh2M(r7, r2, r1, r3, r8, r5, cs(ss(s, r1, r2, r5))) \in nw(s)) = true .
	eq decSym?(r11, prf-skey(ms(ss(s, r1, r2, r5)), seedHs(r4, r8))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cChangeCS2(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Prin .
	op r11 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r1, r2, r5) = none) = false .
	eq (ccsM(r9, r2, r1) \in nw(s)) = true .
	eq (sf2M(r10, r2, r1, r11) \in nw(s)) = true .
	eq (ch2M(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (sh2M(r7, r2, r1, r3, r8, r5, cs(ss(s, r1, r2, r5))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cChangeCS2(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Prin .
	op r11 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r1, r2, r5) = none) = false .
	eq (ccsM(r9, r2, r1) \in nw(s)) = true .
	eq (sf2M(r10, r2, r1, r11) \in nw(s)) = true .
	eq (ch2M(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cChangeCS2(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Prin .
	op r11 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r1, r2, r5) = none) = false .
	eq (ccsM(r9, r2, r1) \in nw(s)) = true .
	eq (sf2M(r10, r2, r1, r11) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cChangeCS2(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Prin .
	op r11 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r1, r2, r5) = none) = false .
	eq (ccsM(r9, r2, r1) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cChangeCS2(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = true .
	eq (scertM(r11, r2, intruder, r12) \in nw(s)) = true .
	eq (chM(intruder, intruder, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, intruder, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, intruder, r14, r15, r16, r17) \in nw(s)) = true .
	eq (ckexM(intruder, intruder, r2, clPubKeyEx(r19, intruder), pqPubKeyEn(r20, intruder), r21) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = true .
	eq (scertM(r11, r2, intruder, r12) \in nw(s)) = true .
	eq (chM(intruder, intruder, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, intruder, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, intruder, r14, r15, r16, r17) \in nw(s)) = true .
	eq (ckexM(intruder, intruder, r2, clPubKeyEx(r19, intruder), pqPubKeyEn(r20, intruder), r21) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = true .
	eq (scertM(r11, r2, intruder, r12) \in nw(s)) = true .
	eq (chM(intruder, intruder, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, intruder, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, intruder, r14, r15, r16, r17) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = true .
	eq (scertM(r11, r2, intruder, r12) \in nw(s)) = true .
	eq (chM(intruder, intruder, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, intruder, r3, r8, r9, r10) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = true .
	eq (scertM(r11, r2, intruder, r12) \in nw(s)) = true .
	eq (chM(intruder, intruder, r2, r3, r4, r5, r6) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = true .
	eq (scertM(r11, r2, intruder, r12) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = true .
	eq (scertM(r11, intruder, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, intruder, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, intruder, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, intruder, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq (ckexM(r1, r1, intruder, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = true .
	eq (scertM(r11, intruder, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, intruder, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, intruder, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, intruder, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq (ckexM(r1, r1, intruder, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = true .
	eq (scertM(r11, intruder, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, intruder, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, intruder, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, intruder, r1, r14, r15, r16, r17) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = true .
	eq (scertM(r11, intruder, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, intruder, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, intruder, r1, r3, r8, r9, r10) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = true .
	eq (scertM(r11, intruder, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, intruder, r3, r4, r5, r6) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = true .
	eq (scertM(r11, intruder, r1, r12) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = true .
	eq (scertM(r11, r2, r2, r12) \in nw(s)) = true .
	eq (chM(r2, r2, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r2, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r2, r14, r15, r16, r17) \in nw(s)) = true .
	eq (ckexM(r2, r2, r2, clPubKeyEx(r19, r2), pqPubKeyEn(r20, r2), r21) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = true .
	eq (scertM(r11, r2, r2, r12) \in nw(s)) = true .
	eq (chM(r2, r2, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r2, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r2, r14, r15, r16, r17) \in nw(s)) = true .
	eq (ckexM(r2, r2, r2, clPubKeyEx(r19, r2), pqPubKeyEn(r20, r2), r21) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = true .
	eq (scertM(r11, r2, r2, r12) \in nw(s)) = true .
	eq (chM(r2, r2, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r2, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r2, r14, r15, r16, r17) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = true .
	eq (scertM(r11, r2, r2, r12) \in nw(s)) = true .
	eq (chM(r2, r2, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r2, r3, r8, r9, r10) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = true .
	eq (scertM(r11, r2, r2, r12) \in nw(s)) = true .
	eq (chM(r2, r2, r2, r3, r4, r5, r6) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = true .
	eq (scertM(r11, r2, r2, r12) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = true .
	eq (r20 \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = true .
	eq (r20 \in pqkLeaked(s)) = false .
	eq (priKey(r2) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = true .
	eq (r20 \in pqkLeaked(s)) = false .
	eq (priKey(r2) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(r15, r20, r17), nw(s)) = true .
	eq (prf-ckey(prf-ms(pms(classicKey(r14, r19), pqKey(r15, r20, r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), seedHs(r4, r8)) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = true .
	eq (r20 \in pqkLeaked(s)) = false .
	eq (priKey(r2) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(r15, r20, r17), nw(s)) = true .
	eq (prf-ckey(prf-ms(pms(classicKey(r14, r19), pqKey(r15, r20, r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), seedHs(r4, r8)) \in hskLeaked(s)) = false .
	eq (cfM(r1, r1, r2, encFin(prf-ckey(prf-ms(pms(classicKey(r14, r19), pqKey(r15, r20, r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), seedHs(r4, r8)), prf-cfin(prf-ms(pms(classicKey(r14, r19), pqKey(r15, r20, r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))))) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv7 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = true .
	eq (r20 \in pqkLeaked(s)) = false .
	eq (priKey(r2) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(r15, r20, r17), nw(s)) = true .
	eq (prf-ckey(prf-ms(pms(classicKey(r14, r19), pqKey(r15, r20, r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), seedHs(r4, r8)) \in hskLeaked(s)) = false .
	eq (cfM(r1, r1, r2, encFin(prf-ckey(prf-ms(pms(classicKey(r14, r19), pqKey(r15, r20, r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), seedHs(r4, r8)), prf-cfin(prf-ms(pms(classicKey(r14, r19), pqKey(r15, r20, r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))))) \in nw(s)) = false .
	red inv7(s, r1, r2, clPubKeyEx(r19, r1), r15, r20, r21, r17) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = true .
	eq (r20 \in pqkLeaked(s)) = false .
	eq (priKey(r2) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(r15, r20, r17), nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = false .
	eq (r20 \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = false .
	eq (r20 \in pqkLeaked(s)) = false .
	eq existClPriKexM(classicKey(r14, r19), nw(s)) = true .
	eq (priKey(r2) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = false .
	eq (r20 \in pqkLeaked(s)) = false .
	eq existClPriKexM(classicKey(r14, r19), nw(s)) = true .
	eq (priKey(r2) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(r15, r20, r17), nw(s)) = true .
	eq (prf-ckey(prf-ms(pms(classicKey(r14, r19), pqKey(r15, r20, r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), seedHs(r4, r8)) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = false .
	eq (r20 \in pqkLeaked(s)) = false .
	eq existClPriKexM(classicKey(r14, r19), nw(s)) = true .
	eq (priKey(r2) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(r15, r20, r17), nw(s)) = true .
	eq (prf-ckey(prf-ms(pms(classicKey(r14, r19), pqKey(r15, r20, r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), seedHs(r4, r8)) \in hskLeaked(s)) = false .
	eq (cfM(r1, r1, r2, encFin(prf-ckey(prf-ms(pms(classicKey(r14, r19), pqKey(r15, r20, r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), seedHs(r4, r8)), prf-cfin(prf-ms(pms(classicKey(r14, r19), pqKey(r15, r20, r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))))) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv7 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = false .
	eq (r20 \in pqkLeaked(s)) = false .
	eq existClPriKexM(classicKey(r14, r19), nw(s)) = true .
	eq (priKey(r2) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(r15, r20, r17), nw(s)) = true .
	eq (prf-ckey(prf-ms(pms(classicKey(r14, r19), pqKey(r15, r20, r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), seedHs(r4, r8)) \in hskLeaked(s)) = false .
	eq (cfM(r1, r1, r2, encFin(prf-ckey(prf-ms(pms(classicKey(r14, r19), pqKey(r15, r20, r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), seedHs(r4, r8)), prf-cfin(prf-ms(pms(classicKey(r14, r19), pqKey(r15, r20, r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))))) \in nw(s)) = false .
	red inv7(s, r1, r2, clPubKeyEx(r19, r1), r15, r20, r21, r17) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = false .
	eq (r20 \in pqkLeaked(s)) = false .
	eq existClPriKexM(classicKey(r14, r19), nw(s)) = true .
	eq (priKey(r2) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(r15, r20, r17), nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = false .
	eq (r20 \in pqkLeaked(s)) = false .
	eq existClPriKexM(classicKey(r14, r19), nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq (sd2 = seedHs(r4, r8)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq (sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq kc = classicKey(r14, r19) .
	eq (h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq (kc = classicKey(r14, r19)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq k' = r20 .
	eq (n = r17) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = true .
	eq (scertM(r11, r2, intruder, r12) \in nw(s)) = true .
	eq (chM(intruder, intruder, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, intruder, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, intruder, r14, r15, r16, r17) \in nw(s)) = true .
	eq (ckexM(intruder, intruder, r2, clPubKeyEx(r19, intruder), pqPubKeyEn(r20, intruder), r21) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = true .
	eq (scertM(r11, r2, intruder, r12) \in nw(s)) = true .
	eq (chM(intruder, intruder, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, intruder, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, intruder, r14, r15, r16, r17) \in nw(s)) = true .
	eq (ckexM(intruder, intruder, r2, clPubKeyEx(r19, intruder), pqPubKeyEn(r20, intruder), r21) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = true .
	eq (scertM(r11, r2, intruder, r12) \in nw(s)) = true .
	eq (chM(intruder, intruder, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, intruder, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, intruder, r14, r15, r16, r17) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = true .
	eq (scertM(r11, r2, intruder, r12) \in nw(s)) = true .
	eq (chM(intruder, intruder, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, intruder, r3, r8, r9, r10) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = true .
	eq (scertM(r11, r2, intruder, r12) \in nw(s)) = true .
	eq (chM(intruder, intruder, r2, r3, r4, r5, r6) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = true .
	eq (scertM(r11, r2, intruder, r12) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = true .
	eq (scertM(r11, intruder, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, intruder, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, intruder, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, intruder, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq (ckexM(r1, r1, intruder, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = true .
	eq (scertM(r11, intruder, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, intruder, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, intruder, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, intruder, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq (ckexM(r1, r1, intruder, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = true .
	eq (scertM(r11, intruder, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, intruder, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, intruder, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, intruder, r1, r14, r15, r16, r17) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = true .
	eq (scertM(r11, intruder, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, intruder, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, intruder, r1, r3, r8, r9, r10) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = true .
	eq (scertM(r11, intruder, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, intruder, r3, r4, r5, r6) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = true .
	eq (scertM(r11, intruder, r1, r12) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = true .
	eq (scertM(r11, r2, r2, r12) \in nw(s)) = true .
	eq (chM(r2, r2, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r2, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r2, r14, r15, r16, r17) \in nw(s)) = true .
	eq (ckexM(r2, r2, r2, clPubKeyEx(r19, r2), pqPubKeyEn(r20, r2), r21) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = true .
	eq (scertM(r11, r2, r2, r12) \in nw(s)) = true .
	eq (chM(r2, r2, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r2, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r2, r14, r15, r16, r17) \in nw(s)) = true .
	eq (ckexM(r2, r2, r2, clPubKeyEx(r19, r2), pqPubKeyEn(r20, r2), r21) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = true .
	eq (scertM(r11, r2, r2, r12) \in nw(s)) = true .
	eq (chM(r2, r2, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r2, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r2, r14, r15, r16, r17) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = true .
	eq (scertM(r11, r2, r2, r12) \in nw(s)) = true .
	eq (chM(r2, r2, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r2, r3, r8, r9, r10) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = true .
	eq (scertM(r11, r2, r2, r12) \in nw(s)) = true .
	eq (chM(r2, r2, r2, r3, r4, r5, r6) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = true .
	eq (scertM(r11, r2, r2, r12) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq priPqKey(r15) = k' .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq (priPqKey(r15) = k') = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq b = r2 .
	eq (k' = r20) = false .
	eq (n = r17) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq a = r1 .
	eq (b = r2) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq pk' = r15 .
	eq (a = r1) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = true .
	eq (scertM(r11, r2, intruder, r12) \in nw(s)) = true .
	eq (chM(intruder, intruder, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, intruder, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, intruder, r14, r15, r16, r17) \in nw(s)) = true .
	eq (ckexM(intruder, intruder, r2, clPubKeyEx(r19, intruder), pqPubKeyEn(r20, intruder), r21) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = true .
	eq (scertM(r11, r2, intruder, r12) \in nw(s)) = true .
	eq (chM(intruder, intruder, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, intruder, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, intruder, r14, r15, r16, r17) \in nw(s)) = true .
	eq (ckexM(intruder, intruder, r2, clPubKeyEx(r19, intruder), pqPubKeyEn(r20, intruder), r21) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = true .
	eq (scertM(r11, r2, intruder, r12) \in nw(s)) = true .
	eq (chM(intruder, intruder, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, intruder, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, intruder, r14, r15, r16, r17) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = true .
	eq (scertM(r11, r2, intruder, r12) \in nw(s)) = true .
	eq (chM(intruder, intruder, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, intruder, r3, r8, r9, r10) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = true .
	eq (scertM(r11, r2, intruder, r12) \in nw(s)) = true .
	eq (chM(intruder, intruder, r2, r3, r4, r5, r6) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = true .
	eq (scertM(r11, r2, intruder, r12) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, intruder) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq r1 = intruder .
	eq (ccsM(intruder, intruder, r2) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = true .
	eq (scertM(r11, intruder, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, intruder, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, intruder, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, intruder, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq (ckexM(r1, r1, intruder, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = true .
	eq (scertM(r11, intruder, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, intruder, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, intruder, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, intruder, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq (ckexM(r1, r1, intruder, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = true .
	eq (scertM(r11, intruder, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, intruder, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, intruder, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, intruder, r1, r14, r15, r16, r17) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = true .
	eq (scertM(r11, intruder, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, intruder, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, intruder, r1, r3, r8, r9, r10) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = true .
	eq (scertM(r11, intruder, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, intruder, r3, r4, r5, r6) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = true .
	eq (scertM(r11, intruder, r1, r12) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = true .
	eq (shDnM(r18, intruder, r1) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq r2 = intruder .
	eq (ccsM(r1, r1, intruder) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = true .
	eq (scertM(r11, r2, r2, r12) \in nw(s)) = true .
	eq (chM(r2, r2, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r2, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r2, r14, r15, r16, r17) \in nw(s)) = true .
	eq (ckexM(r2, r2, r2, clPubKeyEx(r19, r2), pqPubKeyEn(r20, r2), r21) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = true .
	eq (scertM(r11, r2, r2, r12) \in nw(s)) = true .
	eq (chM(r2, r2, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r2, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r2, r14, r15, r16, r17) \in nw(s)) = true .
	eq (ckexM(r2, r2, r2, clPubKeyEx(r19, r2), pqPubKeyEn(r20, r2), r21) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = true .
	eq (scertM(r11, r2, r2, r12) \in nw(s)) = true .
	eq (chM(r2, r2, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r2, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r2, r14, r15, r16, r17) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = true .
	eq (scertM(r11, r2, r2, r12) \in nw(s)) = true .
	eq (chM(r2, r2, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r2, r3, r8, r9, r10) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = true .
	eq (scertM(r11, r2, r2, r12) \in nw(s)) = true .
	eq (chM(r2, r2, r2, r3, r4, r5, r6) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = true .
	eq (scertM(r11, r2, r2, r12) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r2) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq r1 = r2 .
	eq (ccsM(r2, r2, r2) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq priPqKey(r15) = k' .
	eq priPqKey(pk') = r20 .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = true .
	eq (k' \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq priPqKey(r15) = k' .
	eq priPqKey(pk') = r20 .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = true .
	eq (k' \in pqkLeaked(s)) = false .
	eq (priKey(r2) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq priPqKey(r15) = k' .
	eq priPqKey(pk') = r20 .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = true .
	eq (k' \in pqkLeaked(s)) = false .
	eq (priKey(r2) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', r17), nw(s)) = true .
	eq (prf-ckey(prf-ms(pms(classicKey(r14, r19), pqKey(pk', k', r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), seedHs(r4, r8)) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq priPqKey(r15) = k' .
	eq priPqKey(pk') = r20 .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = true .
	eq (k' \in pqkLeaked(s)) = false .
	eq (priKey(r2) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', r17), nw(s)) = true .
	eq (prf-ckey(prf-ms(pms(classicKey(r14, r19), pqKey(pk', k', r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), seedHs(r4, r8)) \in hskLeaked(s)) = false .
	eq (cfM(r1, r1, r2, encFin(prf-ckey(prf-ms(pms(classicKey(r14, r19), pqKey(pk', k', r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), seedHs(r4, r8)), prf-cfin(prf-ms(pms(classicKey(r14, r19), pqKey(pk', k', r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))))) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv18 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq priPqKey(r15) = k' .
	eq priPqKey(pk') = r20 .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = true .
	eq (k' \in pqkLeaked(s)) = false .
	eq (priKey(r2) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', r17), nw(s)) = true .
	eq (prf-ckey(prf-ms(pms(classicKey(r14, r19), pqKey(pk', k', r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), seedHs(r4, r8)) \in hskLeaked(s)) = false .
	eq (cfM(r1, r1, r2, encFin(prf-ckey(prf-ms(pms(classicKey(r14, r19), pqKey(pk', k', r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), seedHs(r4, r8)), prf-cfin(prf-ms(pms(classicKey(r14, r19), pqKey(pk', k', r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))))) \in nw(s)) = false .
	red inv18(s, a, b, r13, r14, r15, pk', r16, n, r17) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq priPqKey(r15) = k' .
	eq priPqKey(pk') = r20 .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = true .
	eq (k' \in pqkLeaked(s)) = false .
	eq (priKey(r2) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', r17), nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq priPqKey(r15) = k' .
	eq priPqKey(pk') = r20 .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq priPqKey(r15) = k' .
	eq priPqKey(pk') = r20 .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(classicKey(r14, r19), nw(s)) = true .
	eq (priKey(r2) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq priPqKey(r15) = k' .
	eq priPqKey(pk') = r20 .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(classicKey(r14, r19), nw(s)) = true .
	eq (priKey(r2) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', r17), nw(s)) = true .
	eq (prf-ckey(prf-ms(pms(classicKey(r14, r19), pqKey(pk', k', r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), seedHs(r4, r8)) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq priPqKey(r15) = k' .
	eq priPqKey(pk') = r20 .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(classicKey(r14, r19), nw(s)) = true .
	eq (priKey(r2) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', r17), nw(s)) = true .
	eq (prf-ckey(prf-ms(pms(classicKey(r14, r19), pqKey(pk', k', r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), seedHs(r4, r8)) \in hskLeaked(s)) = false .
	eq (cfM(r1, r1, r2, encFin(prf-ckey(prf-ms(pms(classicKey(r14, r19), pqKey(pk', k', r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), seedHs(r4, r8)), prf-cfin(prf-ms(pms(classicKey(r14, r19), pqKey(pk', k', r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))))) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv18 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq priPqKey(r15) = k' .
	eq priPqKey(pk') = r20 .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(classicKey(r14, r19), nw(s)) = true .
	eq (priKey(r2) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', r17), nw(s)) = true .
	eq (prf-ckey(prf-ms(pms(classicKey(r14, r19), pqKey(pk', k', r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), seedHs(r4, r8)) \in hskLeaked(s)) = false .
	eq (cfM(r1, r1, r2, encFin(prf-ckey(prf-ms(pms(classicKey(r14, r19), pqKey(pk', k', r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), seedHs(r4, r8)), prf-cfin(prf-ms(pms(classicKey(r14, r19), pqKey(pk', k', r17)), seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))), hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))))) \in nw(s)) = false .
	red inv18(s, a, b, r13, r14, r15, pk', r16, n, r17) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq priPqKey(r15) = k' .
	eq priPqKey(pk') = r20 .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(classicKey(r14, r19), nw(s)) = true .
	eq (priKey(r2) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', r17), nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq priPqKey(r15) = k' .
	eq priPqKey(pk') = r20 .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd2 = seedHs(r4, r8) .
	eq (r19 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(classicKey(r14, r19), nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq priPqKey(r15) = k' .
	eq priPqKey(pk') = r20 .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq (sd2 = seedHs(r4, r8)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq priPqKey(r15) = k' .
	eq priPqKey(pk') = r20 .
	eq kc = classicKey(r14, r19) .
	eq h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1)) .
	eq (sd1 = seedMs(r4, r8, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq priPqKey(r15) = k' .
	eq priPqKey(pk') = r20 .
	eq kc = classicKey(r14, r19) .
	eq (h = hFullHs(r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r14, r15, r16, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq priPqKey(r15) = k' .
	eq priPqKey(pk') = r20 .
	eq (kc = classicKey(r14, r19)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq priPqKey(r15) = k' .
	eq (priPqKey(pk') = r20) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq n = r17 .
	eq (r1 = intruder) = false .
	eq (r2 = intruder) = false .
	eq (r1 = r2) = false .
	eq (priPqKey(r15) = k') = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq b = r2 .
	eq (n = r17) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq a = r1 .
	eq (b = r2) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq sign(r12) = sign(ca, owner(r12), pubKey(r12)) .
	eq (pk' = r15) = false .
	eq (a = r1) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = true .
	eq (sign(r12) = sign(ca, owner(r12), pubKey(r12))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15) .
	eq (ckexM(r1, r1, r2, clPubKeyEx(r19, r1), pqPubKeyEn(r20, r1), r21) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = true .
	eq (decH(r16, pubKey(r12)) = hParams(r4, r8, r14, r15)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = true .
	eq (skexM(r13, r2, r1, r14, r15, r16, r17) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (shM(r7, r2, r1, r3, r8, r9, r10) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = true .
	eq (chM(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = true .
	eq (scertM(r11, r2, r1, r12) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (shDnM(r18, r2, r1) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = true .
	eq (ccsM(r1, r1, r2) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> Prin .
	op r12 : -> Cert .
	op r13 : -> Prin .
	op r14 : -> ClPubKeyEx .
	op r15 : -> PqPubKeyEn .
	op r16 : -> Cipher .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> ClPriKeyEx .
	op r2 : -> Prin .
	op r20 : -> PqPriKeyEn .
	op r21 : -> Nat .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r16, pubKey(r12)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Prin .
	op r11 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq ss(s, r1, r2, r5) = none .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish2(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Prin .
	op r11 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r1, r2, r5) = none) = false .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (ccsM(r9, r2, r1) \in nw(s)) = true .
	eq (sf2M(r10, r2, r1, r11) \in nw(s)) = true .
	eq (ch2M(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (sh2M(r7, r2, r1, r3, r8, r5, cs(ss(s, r1, r2, r5))) \in nw(s)) = true .
	eq decSym?(r11, prf-skey(ms(ss(s, r1, r2, r5)), seedHs(r4, r8))) = true .
	eq decFin(r11, prf-skey(ms(ss(s, r1, r2, r5)), seedHs(r4, r8))) = prf-sfin2(ms(ss(s, r1, r2, r5)), hAbbrHs(r1, r2, r3, r4, r5, r6, r8, cs(ss(s, r1, r2, r5)))) .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish2(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Prin .
	op r11 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r1, r2, r5) = none) = false .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (ccsM(r9, r2, r1) \in nw(s)) = true .
	eq (sf2M(r10, r2, r1, r11) \in nw(s)) = true .
	eq (ch2M(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (sh2M(r7, r2, r1, r3, r8, r5, cs(ss(s, r1, r2, r5))) \in nw(s)) = true .
	eq decSym?(r11, prf-skey(ms(ss(s, r1, r2, r5)), seedHs(r4, r8))) = true .
	eq (decFin(r11, prf-skey(ms(ss(s, r1, r2, r5)), seedHs(r4, r8))) = prf-sfin2(ms(ss(s, r1, r2, r5)), hAbbrHs(r1, r2, r3, r4, r5, r6, r8, cs(ss(s, r1, r2, r5))))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish2(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Prin .
	op r11 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r1, r2, r5) = none) = false .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (ccsM(r9, r2, r1) \in nw(s)) = true .
	eq (sf2M(r10, r2, r1, r11) \in nw(s)) = true .
	eq (ch2M(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (sh2M(r7, r2, r1, r3, r8, r5, cs(ss(s, r1, r2, r5))) \in nw(s)) = true .
	eq decSym?(r11, prf-skey(ms(ss(s, r1, r2, r5)), seedHs(r4, r8))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish2(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Prin .
	op r11 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r1, r2, r5) = none) = false .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (ccsM(r9, r2, r1) \in nw(s)) = true .
	eq (sf2M(r10, r2, r1, r11) \in nw(s)) = true .
	eq (ch2M(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (sh2M(r7, r2, r1, r3, r8, r5, cs(ss(s, r1, r2, r5))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish2(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Prin .
	op r11 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r1, r2, r5) = none) = false .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (ccsM(r9, r2, r1) \in nw(s)) = true .
	eq (sf2M(r10, r2, r1, r11) \in nw(s)) = true .
	eq (ch2M(r1, r1, r2, r3, r4, r5, r6) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish2(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Prin .
	op r11 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r1, r2, r5) = none) = false .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (ccsM(r9, r2, r1) \in nw(s)) = true .
	eq (sf2M(r10, r2, r1, r11) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish2(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Prin .
	op r11 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r1, r2, r5) = none) = false .
	eq (ccsM(r1, r1, r2) \in nw(s)) = true .
	eq (ccsM(r9, r2, r1) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish2(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Prin .
	op r11 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Prin .
	op r8 : -> Rand .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r1, r2, r5) = none) = false .
	eq (ccsM(r1, r1, r2) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(cfinish2(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r4 \in ur(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(chello(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r4 \in ur(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(chello(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq ss(s, r1, r2, r5) = none .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(chello2(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r1, r2, r5) = none) = false .
	eq (r4 \in ur(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(chello2(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r1, r2, r5) = none) = false .
	eq (r4 \in ur(s)) = false .
	eq (cs(ss(s, r1, r2, r5)) \in r6) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(chello2(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r1, r2, r5) = none) = false .
	eq (r4 \in ur(s)) = false .
	eq (cs(ss(s, r1, r2, r5)) \in r6) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(chello2(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq a = b .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq a = intruder .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq b = intruder .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = true .
	red inv3(s, a, b, a, kc, pk', r2, sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = true .
	red inv3(s, a, b, a, kc, pk', r2, sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = true .
	red inv3(s, a, b, a, kc, pk', r2, sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (r2 \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = true .
	red inv3(s, a, b, a, kc, pk', r2, sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (r2 \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = true .
	red inv3(s, a, b, a, kc, pk', r2, sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq (time(s) = n) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq (time(s) = n) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (r2 \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq (time(s) = n) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq (time(s) = n) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq (time(s) = n) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv12 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq (time(s) = n) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = true .
	red inv12(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq (time(s) = n) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq (time(s) = n) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq k' = r2 .
	eq (time(s) = n) = false .
	eq (clKeyPri(kc) = r1) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq (k' = r2) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq (k' = r2) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq (k' = r2) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq (k' = r2) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq (k' = r2) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv12 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq (k' = r2) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = true .
	red inv12(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq (k' = r2) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq (k' = r2) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = true .
	eq (k' = r2) = false .
	eq (clKeyPri(kc) = r1) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, intruder, r16, r17, r18, r19) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, intruder, r5, r10, r11, r12) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = true .
	eq (chM(intruder, intruder, r4, r5, r6, r7, r8) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = true .
	eq (scertM(r13, r4, intruder, r14) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r3 = intruder .
	eq (shDnM(r20, r4, intruder) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (r3 = intruder) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (r3 = intruder) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (r3 = intruder) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (r3 = intruder) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (r3 = intruder) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv12 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (r3 = intruder) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = true .
	red inv12(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (r3 = intruder) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (r3 = intruder) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq sign(r14) = sign(ca, owner(r14), pubKey(r14)) .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (r3 = intruder) = false .
	eq (clKeyPri(kc) = r1) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17) .
	eq (sign(r14) = sign(ca, owner(r14), pubKey(r14))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = true .
	eq (decH(r18, pubKey(r14)) = hParams(r6, r10, r16, r17)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = true .
	eq (skexM(r15, r4, r3, r16, r17, r18, r19) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	eq (shM(r9, r4, r3, r5, r10, r11, r12) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = true .
	eq (chM(r3, r3, r4, r5, r6, r7, r8) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = true .
	eq (scertM(r13, r4, r3, r14) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = true .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (shDnM(r20, r4, r3) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> Prin .
	op r14 : -> Cert .
	op r15 : -> Prin .
	op r16 : -> ClPubKeyEx .
	op r17 : -> PqPubKeyEn .
	op r18 : -> Cipher .
	op r19 : -> Nat .
	op r2 : -> PqPriKeyEn .
	op r20 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> CipherSuites .
	op r8 : -> PqKemParams .
	op r9 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq decAsym?(r18, pubKey(r14)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(ckeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> PubKey .
	op r4 : -> Sign .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r4 \in csign(nw(s))) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCert(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> PubKey .
	op r4 : -> Sign .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r4 \in csign(nw(s))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCert(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in cecfin2(nw(s))) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinish2a(s, r1, r2, r3), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in cecfin2(nw(s))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinish2a(s, r1, r2, r3), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in cecfin(nw(s))) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinisha(s, r1, r2, r3), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in cecfin(nw(s))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinisha(s, r1, r2, r3), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkChangeCS(s, r1, r2), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuites .
	op r6 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkChello(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkChello2(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq a = b .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq a = intruder .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq b = intruder .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (k' \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (k' \in pqkLeaked(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (k' \in pqkLeaked(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (k' \in pqkLeaked(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (k' \in pqkLeaked(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = true .
	red inv3(s, a, b, a, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (k' \in pqkLeaked(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = true .
	red inv3(s, a, b, a, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = true .
	red inv3(s, a, b, a, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = true .
	red inv3(s, a, b, a, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (clKeyPri(kc) = priClKey(r3)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq (time(s) = n) = false .
	eq (k' \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq (time(s) = n) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq (time(s) = n) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq (time(s) = n) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq (time(s) = n) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv12 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq (time(s) = n) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = true .
	red inv12(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq (time(s) = n) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq (time(s) = n) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (clKeyPri(kc) = priClKey(r3)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq (time(s) = n) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq (priPqKey(r4) = k') = false .
	eq (k' \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq (priPqKey(r4) = k') = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq (priPqKey(r4) = k') = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq (priPqKey(r4) = k') = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq (priPqKey(r4) = k') = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv12 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq (priPqKey(r4) = k') = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = true .
	red inv12(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq (priPqKey(r4) = k') = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq (priPqKey(r4) = k') = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (clKeyPri(kc) = priClKey(r3)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq (priPqKey(r4) = k') = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (owner(r4) = intruder) = false .
	eq (k' \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (owner(r4) = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (owner(r4) = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (owner(r4) = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (owner(r4) = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv12 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (owner(r4) = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = true .
	red inv12(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (owner(r4) = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (owner(r4) = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (clKeyPri(kc) = priClKey(r3)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (owner(r4) = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPriKeyEx .
	op r4 : -> PqPriKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in clkLeaked(s)) = true .
	eq (r4 \in pqkLeaked(s)) = true .
	eq k' = r4 .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex2(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPriKeyEx .
	op r4 : -> PqPriKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in clkLeaked(s)) = true .
	eq (r4 \in pqkLeaked(s)) = true .
	eq (k' = r4) = false .
	eq a = b .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex2(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPriKeyEx .
	op r4 : -> PqPriKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in clkLeaked(s)) = true .
	eq (r4 \in pqkLeaked(s)) = true .
	eq (k' = r4) = false .
	eq (a = b) = false .
	eq a = intruder .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex2(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPriKeyEx .
	op r4 : -> PqPriKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in clkLeaked(s)) = true .
	eq (r4 \in pqkLeaked(s)) = true .
	eq (k' = r4) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq b = intruder .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex2(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPriKeyEx .
	op r4 : -> PqPriKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in clkLeaked(s)) = true .
	eq (r4 \in pqkLeaked(s)) = true .
	eq (k' = r4) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq clKeyPri(kc) = r3 .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex2(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPriKeyEx .
	op r4 : -> PqPriKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in clkLeaked(s)) = true .
	eq (r4 \in pqkLeaked(s)) = true .
	eq (k' = r4) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (clKeyPri(kc) = r3) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex2(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPriKeyEx .
	op r4 : -> PqPriKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in clkLeaked(s)) = true .
	eq (r4 \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex2(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPriKeyEx .
	op r4 : -> PqPriKeyEn .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkCkeyex2(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in cesfin2(nw(s))) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinish2a(s, r1, r2, r3), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in cesfin2(nw(s))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinish2a(s, r1, r2, r3), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existPqPriKexM(pmsPqKey(r8), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r8)) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> ClPubKeyEx .
	op r11 : -> PqPubKeyEn .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuites .
	op r7 : -> Rand .
	op r8 : -> Pms .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq existPqPriKexM(pmsPqKey(r8), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r8), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r8)) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinish2b(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in cesfin(nw(s))) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinisha(s, r1, r2, r3), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Cipher .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in cesfin(nw(s))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinisha(s, r1, r2, r3), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in csign(nw(s))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishb(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = true .
	eq (r3 \in csign(nw(s))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = true .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = true .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(getPms(getMs(r17)))) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = true .
	eq existPqPriKexM(pmsPqKey(getPms(getMs(r17))), nw(s)) = false .
	eq existClPriKexM(pmsClKey(getPms(getMs(r17))), nw(s)) = false .
	eq (clKeyPri(pmsClKey(getPms(getMs(r17)))) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = true .
	eq (pqKeyPri(pmsPqKey(r1)) \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = true .
	eq existPqPriKexM(pmsPqKey(r1), nw(s)) = false .
	eq existClPriKexM(pmsClKey(r1), nw(s)) = false .
	eq (clKeyPri(pmsClKey(r1)) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Pms .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r13 : -> ClPubKeyEx .
	op r14 : -> PqPubKeyEn .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Key .
	op r2 : -> PubKey .
	op r3 : -> Sign .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r17 \in hskLeaked(s)) = false .
	eq (r3 \in csign(nw(s))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSfinishc(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> CipherSuite .
	op r6 : -> Sid .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkShello(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Version .
	op r4 : -> Rand .
	op r5 : -> Sid .
	op r6 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkShello2(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkShelloDone(s, r1, r2), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq a = b .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq a = intruder .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq b = intruder .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (k' \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (k' \in pqkLeaked(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (k' \in pqkLeaked(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (k' \in pqkLeaked(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (k' \in pqkLeaked(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = true .
	red inv3(s, a, b, a, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (k' \in pqkLeaked(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = true .
	red inv3(s, a, b, a, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = true .
	red inv3(s, a, b, a, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = true .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = true .
	red inv3(s, a, b, a, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq time(s) = n .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	eq (clKeyPri(kc) = priClKey(r3)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq (time(s) = n) = false .
	eq (k' \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq (time(s) = n) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq (time(s) = n) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq (time(s) = n) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq (time(s) = n) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv12 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq (time(s) = n) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = true .
	red inv12(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq (time(s) = n) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq (time(s) = n) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (clKeyPri(kc) = priClKey(r3)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq priPqKey(r4) = k' .
	eq (k' \in upqk(s)) = false .
	eq (time(s) = n) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq (priPqKey(r4) = k') = false .
	eq (k' \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq (priPqKey(r4) = k') = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq (priPqKey(r4) = k') = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq (priPqKey(r4) = k') = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq (priPqKey(r4) = k') = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv12 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq (priPqKey(r4) = k') = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = true .
	red inv12(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq (priPqKey(r4) = k') = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq (priPqKey(r4) = k') = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (clKeyPri(kc) = priClKey(r3)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq owner(r4) = intruder .
	eq (priPqKey(r4) = k') = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (owner(r4) = intruder) = false .
	eq (k' \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (owner(r4) = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (owner(r4) = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (owner(r4) = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (owner(r4) = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv12 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (owner(r4) = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = true .
	red inv12(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (owner(r4) = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r3) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r3) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (owner(r4) = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (clKeyPri(kc) = priClKey(r3)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	eq (priClKey(r3) \in uclk(s)) = false .
	eq (priPqKey(r4) \in upqk(s)) = false .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (owner(r4) = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPubKeyEx .
	op r4 : -> PqPubKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPriKeyEx .
	op r4 : -> PqPriKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in clkLeaked(s)) = true .
	eq (r4 \in pqkLeaked(s)) = true .
	eq a = b .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex2(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPriKeyEx .
	op r4 : -> PqPriKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in clkLeaked(s)) = true .
	eq (r4 \in pqkLeaked(s)) = true .
	eq (a = b) = false .
	eq a = intruder .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex2(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPriKeyEx .
	op r4 : -> PqPriKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in clkLeaked(s)) = true .
	eq (r4 \in pqkLeaked(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq b = intruder .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex2(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPriKeyEx .
	op r4 : -> PqPriKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in clkLeaked(s)) = true .
	eq (r4 \in pqkLeaked(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r1 = intruder .
	eq k' = r4 .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex2(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPriKeyEx .
	op r4 : -> PqPriKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in clkLeaked(s)) = true .
	eq (r4 \in pqkLeaked(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r1 = intruder .
	eq (k' = r4) = false .
	eq clKeyPri(kc) = r3 .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex2(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPriKeyEx .
	op r4 : -> PqPriKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in clkLeaked(s)) = true .
	eq (r4 \in pqkLeaked(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r1 = intruder .
	eq (k' = r4) = false .
	eq (clKeyPri(kc) = r3) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex2(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPriKeyEx .
	op r4 : -> PqPriKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in clkLeaked(s)) = true .
	eq (r4 \in pqkLeaked(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (r1 = intruder) = false .
	eq clKeyPri(kc) = r3 .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex2(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPriKeyEx .
	op r4 : -> PqPriKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in clkLeaked(s)) = true .
	eq (r4 \in pqkLeaked(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (r1 = intruder) = false .
	eq (clKeyPri(kc) = r3) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex2(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPriKeyEx .
	op r4 : -> PqPriKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in clkLeaked(s)) = true .
	eq (r4 \in pqkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex2(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> ClPriKeyEx .
	op r4 : -> PqPriKeyEn .
	op r5 : -> Rand .
	op r6 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r3 \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(fkSkeyex2(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(helloReq(s, r1, r2), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Key .
	op r4 : -> FinVD .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (cfM(r1, r1, r2, encFin(r3, r4)) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakHsK(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Key .
	op r4 : -> FinVD .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (cfM(r1, r1, r2, encFin(r3, r4)) \in nw(s)) = false .
	eq (sfM(r1, r1, r2, encFin(r3, r4)) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakHsK(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Key .
	op r4 : -> FinVD .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (cfM(r1, r1, r2, encFin(r3, r4)) \in nw(s)) = false .
	eq (sfM(r1, r1, r2, encFin(r3, r4)) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakHsK(s, r1, r2, r3, r4), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakLtK(s, r1), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (priKey(r1) \in' ltkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakLtK(s, r1), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Cipher .
	op r7 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (skexM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq a = b .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE1(s, r1, r2, r3, r4, r5, r6, r7), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Cipher .
	op r7 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (skexM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (a = b) = false .
	eq a = intruder .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE1(s, r1, r2, r3, r4, r5, r6, r7), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Cipher .
	op r7 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (skexM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq b = intruder .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE1(s, r1, r2, r3, r4, r5, r6, r7), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Cipher .
	op r7 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (skexM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (k' \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE1(s, r1, r2, r3, r4, r5, r6, r7), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Cipher .
	op r7 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (skexM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE1(s, r1, r2, r3, r4, r5, r6, r7), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Cipher .
	op r7 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (skexM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r4) .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE1(s, r1, r2, r3, r4, r5, r6, r7), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Cipher .
	op r7 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (skexM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r4) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r4) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE1(s, r1, r2, r3, r4, r5, r6, r7), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Cipher .
	op r7 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (skexM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r4) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r4) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE1(s, r1, r2, r3, r4, r5, r6, r7), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv12 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Cipher .
	op r7 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (skexM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r4) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r4) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = true .
	red inv12(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE1(s, r1, r2, r3, r4, r5, r6, r7), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Cipher .
	op r7 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (skexM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r4) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r4) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE1(s, r1, r2, r3, r4, r5, r6, r7), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Cipher .
	op r7 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (skexM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (clKeyPri(kc) = priClKey(r4)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE1(s, r1, r2, r3, r4, r5, r6, r7), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Cipher .
	op r7 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (skexM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE1(s, r1, r2, r3, r4, r5, r6, r7), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Cipher .
	op r7 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (skexM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE1(s, r1, r2, r3, r4, r5, r6, r7), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Cipher .
	op r7 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (skexM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE2(s, r1, r2, r3, r4, r5, r6, r7), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Cipher .
	op r7 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (skexM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE2(s, r1, r2, r3, r4, r5, r6, r7), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ckexM(r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq a = b .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE3(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ckexM(r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (a = b) = false .
	eq a = intruder .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE3(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ckexM(r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq b = intruder .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE3(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ckexM(r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (k' \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE3(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ckexM(r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE3(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ckexM(r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r4) .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE3(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ckexM(r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r4) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r4) \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE3(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ckexM(r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r4) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r4) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE3(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv12 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ckexM(r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r4) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r4) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = true .
	red inv12(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE3(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ckexM(r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq clKeyPri(kc) = priClKey(r4) .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (priClKey(r4) \in clkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE3(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ckexM(r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (clKeyPri(kc) = priClKey(r4)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE3(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ckexM(r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE3(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ckexM(r1, r2, r3, r4, r5, r6) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE3(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ckexM(r1, r2, r3, r4, r5, r6) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE4(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> ClPubKeyEx .
	op r5 : -> PqPubKeyEn .
	op r6 : -> Nat .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ckexM(r1, r2, r3, r4, r5, r6) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(leakPKE4(s, r1, r2, r3, r4, r5, r6), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (shDnM(r3, r3, r2) \in nw(s)) = true .
	eq (cfM(r18, r2, r3, r19) \in nw(s)) = true .
	eq (ckexM(r14, r2, r3, r15, r16, r17) \in nw(s)) = true .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (shM(r3, r3, r2, r4, r8, r9, r10) \in nw(s)) = true .
	eq (scertM(r3, r3, r2, cert(r3, pubKey(r3), sign(ca, r3, pubKey(r3)))) \in nw(s)) = true .
	eq decSym?(r19, prf-ckey(prf-ms(pms(classicKey(r15, r11), pqKey(r16, r12, r13)), seedMs(r5, r8, r15, r16)), seedHs(r5, r8))) = true .
	eq (skexM(r3, r3, r2, clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3), encH(priKey(r3), hParams(r5, r8, clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3))), r13) \in nw(s)) = true .
	eq decFin(r19, prf-ckey(prf-ms(pms(classicKey(r15, r11), pqKey(r16, r12, r13)), seedMs(r5, r8, r15, r16)), seedHs(r5, r8))) = prf-cfin(prf-ms(pms(classicKey(r15, r11), pqKey(r16, r12, r13)), seedMs(r5, r8, r15, r16)), hFullHs(r2, r3, r4, r5, r6, r7, r8, r9, r10, cert(r3, pubKey(r3), sign(ca, r3, pubKey(r3))), clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3), encH(priKey(r3), hParams(r5, r8, clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3))), r15, r16)) .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sChangeCS(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (shDnM(r3, r3, r2) \in nw(s)) = true .
	eq (cfM(r18, r2, r3, r19) \in nw(s)) = true .
	eq (ckexM(r14, r2, r3, r15, r16, r17) \in nw(s)) = true .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (shM(r3, r3, r2, r4, r8, r9, r10) \in nw(s)) = true .
	eq (scertM(r3, r3, r2, cert(r3, pubKey(r3), sign(ca, r3, pubKey(r3)))) \in nw(s)) = true .
	eq decSym?(r19, prf-ckey(prf-ms(pms(classicKey(r15, r11), pqKey(r16, r12, r13)), seedMs(r5, r8, r15, r16)), seedHs(r5, r8))) = true .
	eq (skexM(r3, r3, r2, clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3), encH(priKey(r3), hParams(r5, r8, clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3))), r13) \in nw(s)) = true .
	eq (decFin(r19, prf-ckey(prf-ms(pms(classicKey(r15, r11), pqKey(r16, r12, r13)), seedMs(r5, r8, r15, r16)), seedHs(r5, r8))) = prf-cfin(prf-ms(pms(classicKey(r15, r11), pqKey(r16, r12, r13)), seedMs(r5, r8, r15, r16)), hFullHs(r2, r3, r4, r5, r6, r7, r8, r9, r10, cert(r3, pubKey(r3), sign(ca, r3, pubKey(r3))), clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3), encH(priKey(r3), hParams(r5, r8, clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3))), r15, r16))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sChangeCS(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (shDnM(r3, r3, r2) \in nw(s)) = true .
	eq (cfM(r18, r2, r3, r19) \in nw(s)) = true .
	eq (ckexM(r14, r2, r3, r15, r16, r17) \in nw(s)) = true .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (shM(r3, r3, r2, r4, r8, r9, r10) \in nw(s)) = true .
	eq (scertM(r3, r3, r2, cert(r3, pubKey(r3), sign(ca, r3, pubKey(r3)))) \in nw(s)) = true .
	eq decSym?(r19, prf-ckey(prf-ms(pms(classicKey(r15, r11), pqKey(r16, r12, r13)), seedMs(r5, r8, r15, r16)), seedHs(r5, r8))) = true .
	eq (skexM(r3, r3, r2, clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3), encH(priKey(r3), hParams(r5, r8, clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3))), r13) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sChangeCS(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (shDnM(r3, r3, r2) \in nw(s)) = true .
	eq (cfM(r18, r2, r3, r19) \in nw(s)) = true .
	eq (ckexM(r14, r2, r3, r15, r16, r17) \in nw(s)) = true .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (shM(r3, r3, r2, r4, r8, r9, r10) \in nw(s)) = true .
	eq (scertM(r3, r3, r2, cert(r3, pubKey(r3), sign(ca, r3, pubKey(r3)))) \in nw(s)) = true .
	eq decSym?(r19, prf-ckey(prf-ms(pms(classicKey(r15, r11), pqKey(r16, r12, r13)), seedMs(r5, r8, r15, r16)), seedHs(r5, r8))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sChangeCS(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (shDnM(r3, r3, r2) \in nw(s)) = true .
	eq (cfM(r18, r2, r3, r19) \in nw(s)) = true .
	eq (ckexM(r14, r2, r3, r15, r16, r17) \in nw(s)) = true .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (shM(r3, r3, r2, r4, r8, r9, r10) \in nw(s)) = true .
	eq (scertM(r3, r3, r2, cert(r3, pubKey(r3), sign(ca, r3, pubKey(r3)))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sChangeCS(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (shDnM(r3, r3, r2) \in nw(s)) = true .
	eq (cfM(r18, r2, r3, r19) \in nw(s)) = true .
	eq (ckexM(r14, r2, r3, r15, r16, r17) \in nw(s)) = true .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (shM(r3, r3, r2, r4, r8, r9, r10) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sChangeCS(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (shDnM(r3, r3, r2) \in nw(s)) = true .
	eq (cfM(r18, r2, r3, r19) \in nw(s)) = true .
	eq (ckexM(r14, r2, r3, r15, r16, r17) \in nw(s)) = true .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sChangeCS(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (shDnM(r3, r3, r2) \in nw(s)) = true .
	eq (cfM(r18, r2, r3, r19) \in nw(s)) = true .
	eq (ckexM(r14, r2, r3, r15, r16, r17) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sChangeCS(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (shDnM(r3, r3, r2) \in nw(s)) = true .
	eq (cfM(r18, r2, r3, r19) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sChangeCS(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (shDnM(r3, r3, r2) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sChangeCS(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> Sid .
	op r7 : -> CipherSuites .
	op r8 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq ss(s, r2, r3, r6) = none .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sChangeCS2(s, r1, r2, r3, r4, r5, r6, r7, r8), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> Sid .
	op r7 : -> CipherSuites .
	op r8 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r2, r3, r6) = none) = false .
	eq (ch2M(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (sh2M(r3, r3, r2, r4, r8, r6, cs(ss(s, r2, r3, r6))) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sChangeCS2(s, r1, r2, r3, r4, r5, r6, r7, r8), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> Sid .
	op r7 : -> CipherSuites .
	op r8 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r2, r3, r6) = none) = false .
	eq (ch2M(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (sh2M(r3, r3, r2, r4, r8, r6, cs(ss(s, r2, r3, r6))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sChangeCS2(s, r1, r2, r3, r4, r5, r6, r7, r8), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> Sid .
	op r7 : -> CipherSuites .
	op r8 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r2, r3, r6) = none) = false .
	eq (ch2M(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sChangeCS2(s, r1, r2, r3, r4, r5, r6, r7, r8), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (shM(r3, r3, r2, r4, r8, r9, r10) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(scert(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (shM(r3, r3, r2, r4, r8, r9, r10) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(scert(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(scert(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ccsM(r3, r3, r2) \in nw(s)) = true .
	eq (shDnM(r3, r3, r2) \in nw(s)) = true .
	eq (cfM(r18, r2, r3, r19) \in nw(s)) = true .
	eq (ckexM(r14, r2, r3, r15, r16, r17) \in nw(s)) = true .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (shM(r3, r3, r2, r4, r8, r9, r10) \in nw(s)) = true .
	eq (scertM(r3, r3, r2, cert(r3, pubKey(r3), sign(ca, r3, pubKey(r3)))) \in nw(s)) = true .
	eq decSym?(r19, prf-ckey(prf-ms(pms(classicKey(r15, r11), pqKey(r16, r12, r13)), seedMs(r5, r8, r15, r16)), seedHs(r5, r8))) = true .
	eq (skexM(r3, r3, r2, clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3), encH(priKey(r3), hParams(r5, r8, clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3))), r13) \in nw(s)) = true .
	eq decFin(r19, prf-ckey(prf-ms(pms(classicKey(r15, r11), pqKey(r16, r12, r13)), seedMs(r5, r8, r15, r16)), seedHs(r5, r8))) = prf-cfin(prf-ms(pms(classicKey(r15, r11), pqKey(r16, r12, r13)), seedMs(r5, r8, r15, r16)), hFullHs(r2, r3, r4, r5, r6, r7, r8, r9, r10, cert(r3, pubKey(r3), sign(ca, r3, pubKey(r3))), clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3), encH(priKey(r3), hParams(r5, r8, clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3))), r15, r16)) .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ccsM(r3, r3, r2) \in nw(s)) = true .
	eq (shDnM(r3, r3, r2) \in nw(s)) = true .
	eq (cfM(r18, r2, r3, r19) \in nw(s)) = true .
	eq (ckexM(r14, r2, r3, r15, r16, r17) \in nw(s)) = true .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (shM(r3, r3, r2, r4, r8, r9, r10) \in nw(s)) = true .
	eq (scertM(r3, r3, r2, cert(r3, pubKey(r3), sign(ca, r3, pubKey(r3)))) \in nw(s)) = true .
	eq decSym?(r19, prf-ckey(prf-ms(pms(classicKey(r15, r11), pqKey(r16, r12, r13)), seedMs(r5, r8, r15, r16)), seedHs(r5, r8))) = true .
	eq (skexM(r3, r3, r2, clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3), encH(priKey(r3), hParams(r5, r8, clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3))), r13) \in nw(s)) = true .
	eq (decFin(r19, prf-ckey(prf-ms(pms(classicKey(r15, r11), pqKey(r16, r12, r13)), seedMs(r5, r8, r15, r16)), seedHs(r5, r8))) = prf-cfin(prf-ms(pms(classicKey(r15, r11), pqKey(r16, r12, r13)), seedMs(r5, r8, r15, r16)), hFullHs(r2, r3, r4, r5, r6, r7, r8, r9, r10, cert(r3, pubKey(r3), sign(ca, r3, pubKey(r3))), clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3), encH(priKey(r3), hParams(r5, r8, clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3))), r15, r16))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ccsM(r3, r3, r2) \in nw(s)) = true .
	eq (shDnM(r3, r3, r2) \in nw(s)) = true .
	eq (cfM(r18, r2, r3, r19) \in nw(s)) = true .
	eq (ckexM(r14, r2, r3, r15, r16, r17) \in nw(s)) = true .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (shM(r3, r3, r2, r4, r8, r9, r10) \in nw(s)) = true .
	eq (scertM(r3, r3, r2, cert(r3, pubKey(r3), sign(ca, r3, pubKey(r3)))) \in nw(s)) = true .
	eq decSym?(r19, prf-ckey(prf-ms(pms(classicKey(r15, r11), pqKey(r16, r12, r13)), seedMs(r5, r8, r15, r16)), seedHs(r5, r8))) = true .
	eq (skexM(r3, r3, r2, clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3), encH(priKey(r3), hParams(r5, r8, clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3))), r13) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ccsM(r3, r3, r2) \in nw(s)) = true .
	eq (shDnM(r3, r3, r2) \in nw(s)) = true .
	eq (cfM(r18, r2, r3, r19) \in nw(s)) = true .
	eq (ckexM(r14, r2, r3, r15, r16, r17) \in nw(s)) = true .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (shM(r3, r3, r2, r4, r8, r9, r10) \in nw(s)) = true .
	eq (scertM(r3, r3, r2, cert(r3, pubKey(r3), sign(ca, r3, pubKey(r3)))) \in nw(s)) = true .
	eq decSym?(r19, prf-ckey(prf-ms(pms(classicKey(r15, r11), pqKey(r16, r12, r13)), seedMs(r5, r8, r15, r16)), seedHs(r5, r8))) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ccsM(r3, r3, r2) \in nw(s)) = true .
	eq (shDnM(r3, r3, r2) \in nw(s)) = true .
	eq (cfM(r18, r2, r3, r19) \in nw(s)) = true .
	eq (ckexM(r14, r2, r3, r15, r16, r17) \in nw(s)) = true .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (shM(r3, r3, r2, r4, r8, r9, r10) \in nw(s)) = true .
	eq (scertM(r3, r3, r2, cert(r3, pubKey(r3), sign(ca, r3, pubKey(r3)))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ccsM(r3, r3, r2) \in nw(s)) = true .
	eq (shDnM(r3, r3, r2) \in nw(s)) = true .
	eq (cfM(r18, r2, r3, r19) \in nw(s)) = true .
	eq (ckexM(r14, r2, r3, r15, r16, r17) \in nw(s)) = true .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (shM(r3, r3, r2, r4, r8, r9, r10) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ccsM(r3, r3, r2) \in nw(s)) = true .
	eq (shDnM(r3, r3, r2) \in nw(s)) = true .
	eq (cfM(r18, r2, r3, r19) \in nw(s)) = true .
	eq (ckexM(r14, r2, r3, r15, r16, r17) \in nw(s)) = true .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ccsM(r3, r3, r2) \in nw(s)) = true .
	eq (shDnM(r3, r3, r2) \in nw(s)) = true .
	eq (cfM(r18, r2, r3, r19) \in nw(s)) = true .
	eq (ckexM(r14, r2, r3, r15, r16, r17) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ccsM(r3, r3, r2) \in nw(s)) = true .
	eq (shDnM(r3, r3, r2) \in nw(s)) = true .
	eq (cfM(r18, r2, r3, r19) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ccsM(r3, r3, r2) \in nw(s)) = true .
	eq (shDnM(r3, r3, r2) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r14 : -> Prin .
	op r15 : -> ClPubKeyEx .
	op r16 : -> PqPubKeyEn .
	op r17 : -> Nat .
	op r18 : -> Prin .
	op r19 : -> Cipher .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ccsM(r3, r3, r2) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sfinish(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> Sid .
	op r7 : -> CipherSuites .
	op r8 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq ss(s, r2, r3, r6) = none .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sfinish2(s, r1, r2, r3, r4, r5, r6, r7, r8), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> Sid .
	op r7 : -> CipherSuites .
	op r8 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r2, r3, r6) = none) = false .
	eq (ccsM(r3, r3, r2) \in nw(s)) = true .
	eq (ch2M(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (sh2M(r3, r3, r2, r4, r8, r6, cs(ss(s, r2, r3, r6))) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sfinish2(s, r1, r2, r3, r4, r5, r6, r7, r8), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> Sid .
	op r7 : -> CipherSuites .
	op r8 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r2, r3, r6) = none) = false .
	eq (ccsM(r3, r3, r2) \in nw(s)) = true .
	eq (ch2M(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (sh2M(r3, r3, r2, r4, r8, r6, cs(ss(s, r2, r3, r6))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sfinish2(s, r1, r2, r3, r4, r5, r6, r7, r8), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> Sid .
	op r7 : -> CipherSuites .
	op r8 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r2, r3, r6) = none) = false .
	eq (ccsM(r3, r3, r2) \in nw(s)) = true .
	eq (ch2M(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sfinish2(s, r1, r2, r3, r4, r5, r6, r7, r8), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> Sid .
	op r7 : -> CipherSuites .
	op r8 : -> Rand .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r2, r3, r6) = none) = false .
	eq (ccsM(r3, r3, r2) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(sfinish2(s, r1, r2, r3, r4, r5, r6, r7, r8), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Rand .
	op r10 : -> PqKemParams .
	op r2 : -> CipherSuite .
	op r3 : -> Sid .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Prin .
	op r7 : -> Version .
	op r8 : -> Rand .
	op r9 : -> CipherSuites .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r2 \in r9) = true .
	eq (r1 \in ur(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(shello(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Rand .
	op r10 : -> PqKemParams .
	op r2 : -> CipherSuite .
	op r3 : -> Sid .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Prin .
	op r7 : -> Version .
	op r8 : -> Rand .
	op r9 : -> CipherSuites .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r2 \in r9) = true .
	eq (r1 \in ur(s)) = false .
	eq (r3 \in ui(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(shello(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Rand .
	op r10 : -> PqKemParams .
	op r2 : -> CipherSuite .
	op r3 : -> Sid .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Prin .
	op r7 : -> Version .
	op r8 : -> Rand .
	op r9 : -> CipherSuites .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r2 \in r9) = true .
	eq (r1 \in ur(s)) = false .
	eq (r3 \in ui(s)) = false .
	eq (chM(r4, r5, r6, r7, r8, r9, r10) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(shello(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Rand .
	op r10 : -> PqKemParams .
	op r2 : -> CipherSuite .
	op r3 : -> Sid .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Prin .
	op r7 : -> Version .
	op r8 : -> Rand .
	op r9 : -> CipherSuites .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r2 \in r9) = true .
	eq (r1 \in ur(s)) = false .
	eq (r3 \in ui(s)) = false .
	eq (chM(r4, r5, r6, r7, r8, r9, r10) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(shello(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Rand .
	op r10 : -> PqKemParams .
	op r2 : -> CipherSuite .
	op r3 : -> Sid .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Prin .
	op r7 : -> Version .
	op r8 : -> Rand .
	op r9 : -> CipherSuites .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r2 \in r9) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(shello(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Rand .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> Sid .
	op r8 : -> CipherSuites .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq ss(s, r3, r4, r7) = none .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(shello2(s, r1, r2, r3, r4, r5, r6, r7, r8), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Rand .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> Sid .
	op r8 : -> CipherSuites .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r3, r4, r7) = none) = false .
	eq (r1 \in ur(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(shello2(s, r1, r2, r3, r4, r5, r6, r7, r8), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Rand .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> Sid .
	op r8 : -> CipherSuites .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r3, r4, r7) = none) = false .
	eq (r1 \in ur(s)) = false .
	eq (cs(ss(s, r3, r4, r7)) \in r8) = true .
	eq (ch2M(r2, r3, r4, r5, r6, r7, r8) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(shello2(s, r1, r2, r3, r4, r5, r6, r7, r8), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Rand .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> Sid .
	op r8 : -> CipherSuites .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r3, r4, r7) = none) = false .
	eq (r1 \in ur(s)) = false .
	eq (cs(ss(s, r3, r4, r7)) \in r8) = true .
	eq (ch2M(r2, r3, r4, r5, r6, r7, r8) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(shello2(s, r1, r2, r3, r4, r5, r6, r7, r8), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Rand .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Version .
	op r6 : -> Rand .
	op r7 : -> Sid .
	op r8 : -> CipherSuites .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (ss(s, r3, r4, r7) = none) = false .
	eq (r1 \in ur(s)) = false .
	eq (cs(ss(s, r3, r4, r7)) \in r8) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(shello2(s, r1, r2, r3, r4, r5, r6, r7, r8), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (shM(r3, r3, r2, r4, r8, r9, r10) \in nw(s)) = true .
	eq (scertM(r3, r3, r2, cert(r3, pubKey(r3), sign(ca, r3, pubKey(r3)))) \in nw(s)) = true .
	eq (skexM(r3, r3, r2, clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3), encH(priKey(r3), hParams(r5, r8, clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3))), r13) \in nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(shelloDone(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (shM(r3, r3, r2, r4, r8, r9, r10) \in nw(s)) = true .
	eq (scertM(r3, r3, r2, cert(r3, pubKey(r3), sign(ca, r3, pubKey(r3)))) \in nw(s)) = true .
	eq (skexM(r3, r3, r2, clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3), encH(priKey(r3), hParams(r5, r8, clPubKeyEx(r11, r3), pqPubKeyEn(r12, r3))), r13) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(shelloDone(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (shM(r3, r3, r2, r4, r8, r9, r10) \in nw(s)) = true .
	eq (scertM(r3, r3, r2, cert(r3, pubKey(r3), sign(ca, r3, pubKey(r3)))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(shelloDone(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = true .
	eq (shM(r3, r3, r2, r4, r8, r9, r10) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(shelloDone(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> Prin .
	op r10 : -> Sid .
	op r11 : -> ClPriKeyEx .
	op r12 : -> PqPriKeyEn .
	op r13 : -> Nat .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> Version .
	op r5 : -> Rand .
	op r6 : -> CipherSuites .
	op r7 : -> PqKemParams .
	op r8 : -> Rand .
	op r9 : -> CipherSuite .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (chM(r1, r2, r3, r4, r5, r6, r7) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(shelloDone(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq a = b .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq a = intruder .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq b = intruder .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = true .
	red inv3(s, a, b, a, kc, pk', r2, sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = true .
	red inv3(s, a, b, a, kc, pk', r2, sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = true .
	red inv3(s, a, b, a, kc, pk', r2, sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq clKeyPri(kc) = r1 .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (r1 \in clkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (r2 \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = true .
	red inv3(s, a, b, a, kc, pk', r2, sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (r2 \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv3 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = true .
	red inv3(s, a, b, a, kc, pk', r2, sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq time(s) = n .
	eq (clKeyPri(kc) = r1) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq (clKeyPri(kc) \in clkLeaked(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq (time(s) = n) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq (time(s) = n) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (r2 \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq (time(s) = n) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq (time(s) = n) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq (time(s) = n) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv12 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq (time(s) = n) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = true .
	red inv12(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq (time(s) = n) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', r2, n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq (time(s) = n) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (r2 \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', r2, n), nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq k' = r2 .
	eq (time(s) = n) = false .
	eq (clKeyPri(kc) = r1) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq (k' = r2) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq (k' = r2) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq (k' = r2) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq (k' = r2) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq (k' = r2) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv12 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq (k' = r2) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = true .
	red inv12(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq (k' = r2) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq (k' = r2) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = true .
	eq (k' = r2) = false .
	eq (clKeyPri(kc) = r1) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(intruder, intruder, r4, cert(intruder, pubKey(intruder), sign(ca, intruder, pubKey(intruder)))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(intruder, intruder, r4, r6, r10, r11, r12) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq r5 = intruder .
	eq (chM(r3, r4, intruder, r6, r7, r8, r9) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (r5 = intruder) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (r5 = intruder) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (r5 = intruder) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (r5 = intruder) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (r5 = intruder) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = true .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true, use inv12 as a lemma 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (r5 = intruder) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = true .
	red inv12(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (r5 = intruder) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = true .
	eq (priKey(b) \in' ltkLeaked(s)) = false .
	eq (prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2) \in hskLeaked(s)) = false .
	eq (cfM(a, a, b, encFin(prf-ckey(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), sd2), prf-cfin(prf-ms(pms(kc, pqKey(pk', k', n)), sd1), h))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (r5 = intruder) = false .
	eq clKeyPri(kc) = r1 .
	eq (r1 \in clkLeaked(s)) = false .
	eq (k' \in pqkLeaked(s)) = false .
	eq existClPriKexM(kc, nw(s)) = false .
	eq existPqPriKexM(pqKey(pk', k', n), nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = true .
	eq (a = b) = false .
	eq (a = intruder) = false .
	eq (b = intruder) = false .
	eq (r5 = intruder) = false .
	eq (clKeyPri(kc) = r1) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = true .
	eq (scertM(r5, r5, r4, cert(r5, pubKey(r5), sign(ca, r5, pubKey(r5)))) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = true .
	eq (shM(r5, r5, r4, r6, r10, r11, r12) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> true 
open INV .
	op a : -> Prin .
	op b : -> Prin .
	op h : -> Hash .
	op k' : -> PqPriKeyEn .
	op kc : -> ClassicKey .
	op n : -> Nat .
	op pk' : -> PqPubKeyEn .
	op r1 : -> ClPriKeyEx .
	op r10 : -> Rand .
	op r11 : -> CipherSuite .
	op r12 : -> Sid .
	op r2 : -> PqPriKeyEn .
	op r3 : -> Prin .
	op r4 : -> Prin .
	op r5 : -> Prin .
	op r6 : -> Version .
	op r7 : -> Rand .
	op r8 : -> CipherSuites .
	op r9 : -> PqKemParams .
	op s : -> Sys .
	op sd1 : -> Seed .
	op sd2 : -> Seed .
	eq (r1 \in uclk(s)) = false .
	eq (r2 \in upqk(s)) = false .
	eq (chM(r3, r4, r5, r6, r7, r8, r9) \in nw(s)) = false .
	red inv1(s, a, b, kc, pk', k', sd1, sd2, h, n) implies inv1(skeyex(s, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12), a, b, kc, pk', k', sd1, sd2, h, n) .
close

--> Time taken is 183345ms